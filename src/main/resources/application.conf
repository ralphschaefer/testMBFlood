settings {
  actorSystemName = "mbFlood"
  seednode = "akka.tcp://mbFlood@127.0.0.1:2551"
  seednode = ${?SEEDNODE}
  remote {
    hostname = "127.0.0.1"
    hostname = ${?REMOTEHOST}
    port = 2551
    port = ${?REMOTEPORT}
  }
}


akka {
  loglevel = INFO
  stdout-loglevel = INFO
  event-handlers = ["akka.event.Logging$DefaultLogger"]
  log-dead-letters = 0
  log-dead-letters-during-shutdown = off
  actor {
    provider = "cluster"
    deployment {
      /shutdownRoute {
        router = broadcast-group
        routees.paths = ["/user/shutdown"]
        cluster = {
          enabled = on
          allow-local-routees = off
        }
      }
    }

    enable-additional-serialization-bindings = on
    allow-java-serialization = off
    serializers {
      kryo = "com.twitter.chill.akka.AkkaSerializer"
    }
    serialization-bindings {
     "java.io.Serializable" = kryo
    }
  }
  remote {
    log-remote-lifecycle-events = off
    netty.tcp {
      hostname = ${settings.remote.hostname}
      port = ${settings.remote.port}
    }
  }
  cluster {
    seed-nodes = [
      ${settings.seednode}
    ]
  }
}

akka.cluster.pub-sub {
  # Actor name of the mediator actor, /system/distributedPubSubMediator
  name = distributedPubSubMediator

  # Start the mediator on members tagged with this role.
  # All members are used if undefined or empty.
  role = ""

  # The routing logic to use for 'Send'
  # Possible values: random, round-robin, broadcast
  routing-logic = broadcast

  # How often the DistributedPubSubMediator should send out gossip information
  gossip-interval = 1s

  # Removed entries are pruned after this duration
  removed-time-to-live = 120s

  # Maximum number of elements to transfer in one message when synchronizing the registries.
  # Next chunk will be transferred in next round of gossip.
  max-delta-elements = 3000

  # The id of the dispatcher to use for DistributedPubSubMediator actors.
  # If not specified default dispatcher is used.
  # If specified you need to define the settings of the actual dispatcher.
  use-dispatcher = ""
}